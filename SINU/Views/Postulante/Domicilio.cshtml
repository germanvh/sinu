@model SINU.ViewModels.DomicilioVM

@*@{
    ViewBag.Title = "Domicilio";
    Layout = "~/Views/Shared/_Layout.cshtml";
}*@

@using (Ajax.BeginForm("Domicilio", "Postulante", null,
    new AjaxOptions
    {
        HttpMethod = "POST",
        OnSuccess = "Exito(data,status,xhr)",
        OnFailure = "Falla",
//LoadingElementId = "carga",
//LoadingElementDuration = 1000,
//UpdateTargetId = "resultTarget"
},
    new { id = "BeginFormDomicilio" }))
{
    @Html.AntiForgeryToken()

    <div class="form-group">


        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            <h2>Domicilio que figura en el DNI:</h2>
            <br />
            <div class="form-group row">
                @Html.HiddenFor(model => model.vPersona_DomicilioVM.IdDomicilioDNI)
                @Html.HiddenFor(model => model.vPersona_DomicilioVM.IdDomicilioActual)

                <div class="col-md-6">





                    <div class="form-group">
                        @Html.LabelFor(model => model.vPersona_DomicilioVM.Calle, htmlAttributes: new { @class = "control-label col-md-12" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.vPersona_DomicilioVM.Calle, new { htmlAttributes = new { @class = "form-control  " } })
                            @Html.ValidationMessageFor(model => model.vPersona_DomicilioVM.Calle, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.vPersona_DomicilioVM.Numero, htmlAttributes: new { @class = "control-label col-md-12" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.vPersona_DomicilioVM.Numero, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.vPersona_DomicilioVM.Numero, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.vPersona_DomicilioVM.Piso, htmlAttributes: new { @class = "control-label col-md-12" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.vPersona_DomicilioVM.Piso, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.vPersona_DomicilioVM.Piso, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.vPersona_DomicilioVM.Unidad, htmlAttributes: new { @class = "control-label col-md-12" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.vPersona_DomicilioVM.Unidad, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.vPersona_DomicilioVM.Unidad, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="col-md-6">

                    <div class="form-group">
                        @Html.LabelFor(m => m.vPersona_DomicilioVM.IdPais, new { @class = "col-md-12 control-label" })
                        <div class="col-md-10">

                            @Html.DropDownListFor(model => model.vPersona_DomicilioVM.IdPais, new SelectList(Model.sp_vPaises_ResultVM, "CODIGO", "DESCRIPCION"), "Seleccione un Pais", htmlAttributes: new { @class = "form-control combobox", @id = "ListaPaisR" })
                            @Html.ValidationMessageFor(model => model.vPersona_DomicilioVM.IdPais, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(m => m.vPersona_DomicilioVM.Provincia, new { @class = "col-md-12 control-label" })
                        <div class="col-md-10">
                            @Html.TextBoxFor(model => model.vPersona_DomicilioVM.TBoxProvincia, new { @class = "form-control Real", @id = "ProvinciaR" })
                            @Html.ValidationMessageFor(model => model.vPersona_DomicilioVM.TBoxProvincia, "", new { @class = "text-danger Real" })


                            @* el "DropdownlistFor" se reemplaza por un "TextBoxFor" en el caso de que se eliga un pais distinto a "ARGENTINA" *@
                            @Html.DropDownListFor(model => model.vPersona_DomicilioVM.Provincia, Model.provincias, "Seleccione una Provincia", htmlAttributes: new { @class = "form-control combobox RealAR", @id = "ComboProvinciaR" })
                            <div class="h-100"></div>
                            @Html.ValidationMessageFor(model => model.vPersona_DomicilioVM.Provincia, "", new { @class = "text-danger RealAR" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(m => m.vPersona_DomicilioVM.Localidad, new { @class = "col-md-12 control-label" })
                        <div class="col-md-10">

                            @Html.TextBoxFor(model => model.vPersona_DomicilioVM.Localidad, new { @class = "form-control Real", @id = "LocalidadR" })
                            @Html.ValidationMessageFor(model => model.vPersona_DomicilioVM.Localidad, "", new { @class = "text-danger Real" })

                            @* el "DropdownlistFor" se reemplaza por un "TextBoxFor" en el caso de que se eliga un pais distinto a "ARGENTINA" *@
                            @Html.DropDownListFor(model => model.vPersona_DomicilioVM.IdLocalidad, new SelectList(Model.vProvincia_Depto_LocalidadREALVM, "IdLocalidad", "Localidad"), "Seleccione una Localidad", htmlAttributes: new { @class = "form-control combobox RealAR", @id = "ComboLocalidadR" })
                            <div class="h-100"></div>
                            @Html.ValidationMessageFor(model => model.vPersona_DomicilioVM.IdLocalidad, "", new { @class = "text-danger RealAR" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.vPersona_DomicilioVM.CODIGO_POSTAL, htmlAttributes: new { @class = "control-label col-md-12" })
                        <div class="col-md-10">
                            @Html.TextBoxFor(model => model.vPersona_DomicilioVM.CODIGO_POSTAL, new { @class = "form-control", @id = "CPR", @readonly = true })
                            @Html.ValidationMessageFor(model => model.vPersona_DomicilioVM.CODIGO_POSTAL, "", new { @class = "text-danger" })
                        </div>
                    </div>

                </div>
                <br />
            </div>
            <h2>Domicilio donde vive actualmente:</h2>
            <br />
            <div class="form-group row ">


                <div class="col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.vPersona_DomicilioVM.EventualCalle, htmlAttributes: new { @class = "control-label col-md-12" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.vPersona_DomicilioVM.EventualCalle, new { htmlAttributes = new { @class = "form-control  " } })
                            @Html.ValidationMessageFor(model => model.vPersona_DomicilioVM.EventualCalle, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.vPersona_DomicilioVM.EventualNumero, htmlAttributes: new { @class = "control-label col-md-12" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.vPersona_DomicilioVM.EventualNumero, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.vPersona_DomicilioVM.EventualNumero, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.vPersona_DomicilioVM.EventualPiso, htmlAttributes: new { @class = "control-label col-md-12" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.vPersona_DomicilioVM.EventualPiso, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.vPersona_DomicilioVM.EventualPiso, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.vPersona_DomicilioVM.EventualUnidad, htmlAttributes: new { @class = "control-label col-md-12" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.vPersona_DomicilioVM.EventualUnidad, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.vPersona_DomicilioVM.EventualUnidad, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="col-md-6">

                    <div class="form-group">
                        @Html.LabelFor(m => m.vPersona_DomicilioVM.EventualPais, new { @class = "col-md-12 control-label" })
                        <div class="col-md-10">
                            @Html.DropDownListFor(model => model.vPersona_DomicilioVM.EventualIdPais, new SelectList(Model.sp_vPaises_ResultVM, "CODIGO", "DESCRIPCION"), null, htmlAttributes: new { @class = "form-control combobox", @id = "ListaPaisE" })
                            @Html.ValidationMessageFor(model => model.vPersona_DomicilioVM.EventualPais, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(m => m.vPersona_DomicilioVM.EventualProvincia, new { @class = "col-md-12 control-label" })
                        <div class="col-md-10">
                            @Html.TextBoxFor(model => model.vPersona_DomicilioVM.TBoxEventualProvincia, new { @class = "form-control Eventual", @id = "ProvinciaE" })
                            @Html.ValidationMessageFor(model => model.vPersona_DomicilioVM.TBoxEventualProvincia, "", new { @class = "text-danger Eventual" })

                            @Html.DropDownListFor(model => model.vPersona_DomicilioVM.EventualProvincia, Model.provincias, "Seleccione una Provincia", htmlAttributes: new { @class = "form-control combobox EventualAR", @id = "ComboProvinciaE" })
                            <div class="h-100"></div>
                            @Html.ValidationMessageFor(model => model.vPersona_DomicilioVM.EventualProvincia, "", new { @class = "text-danger EventualAR" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(m => m.vPersona_DomicilioVM.EventualLocalidad, new { @class = "col-md-12 control-label" })
                        <div class="col-md-10">
                            @Html.TextBoxFor(model => model.vPersona_DomicilioVM.EventualLocalidad, new { @class = "form-control Eventual", @id = "LocalidadE" })
                            @Html.ValidationMessageFor(model => model.vPersona_DomicilioVM.EventualLocalidad, "", new { @class = "text-danger Eventual" })

                            @Html.DropDownListFor(model => model.vPersona_DomicilioVM.EventualIdLocalidad, new SelectList(Model.vProvincia_Depto_LocalidadEVENTUALVM, "IdLocalidad", "Localidad"), "Seleccione una Localidad", htmlAttributes: new { @class = "form-control combobox EventualAR", @id = "ComboLocalidadE" })
                            <div class="h-100"></div>
                            @Html.ValidationMessageFor(model => model.vPersona_DomicilioVM.EventualIdLocalidad, "", new { @class = "text-danger EventualAR" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.vPersona_DomicilioVM.EventualCodigo_Postal, htmlAttributes: new { @class = "control-label col-md-12" })
                        <div class="col-md-10">
                            @Html.TextBoxFor(model => model.vPersona_DomicilioVM.EventualCodigo_Postal, new { @class = "form-control", @id = "CPE" })
                            <div class="h-100"></div>
                            @Html.ValidationMessageFor(model => model.vPersona_DomicilioVM.EventualCodigo_Postal, "", new { @class = "text-danger" })
                        </div>
                    </div>

                </div>
                <br />
            </div>
            <div class="form-group pl-3 BTAcciones">
                <input type="submit" value="Guadar Datos" class="btn btn-success" placeholder="" />
            </div>


        </div>
    </div>
}


@section Scripts {



    @*<script type="text/javascript">


            $(document).ready(function () {

                //se aplicael selecpicker a alos conbo/s con autocomplete
                /* https://developer.snapappointments.com/bootstrap-select/ */
                    $(".combobox").selectpicker({
                        liveSearch: true,
                        size: 6,
                        width: "40vh",
                        liveSearchPlaceholder: "Ingrese su busqueda",
                        liveSearchStyle: 'contains',//'startsWith'
                        noneResultsText:'No se Encuantran Resultados'
                    });

                $("select").on('changed.bs.select', function (e, clickedIndex, isSelected, previousValue) {
                    comboid = $(this).attr("id");
                    //alert(comboid);
                    switch (comboid) {
                            case "ListaPaisR":
                            case "ListaPaisE":
                                PAIS(comboid, 1)
                                break;
                            case "ComboProvinciaR":
                            case "ComboProvinciaE":
                                PROVINCIA(comboid);
                                break;
                            case "ComboLocalidadR":
                            case "ComboLocalidadE":
                                LOCALIDAD(comboid);
                                break;
                            default:
                    }
                });

                //al crgar la pagina se verifica si el pais del domiciolio REAL es AR
                PAIS("ListaPaisR", 0);
                PAIS("ListaPaisE", 0);



                ////si se recibe 0 es carga inicial de la pagina y nose se limpian los campos, si es 1 se limpia los campos
                function PAIS(Combo, PRI) {
                    var Comboelemt = (Combo == "ListaPaisR") ? [".Real", ".RealAR", "#CPR"]
                                                             : [".Eventual", ".EventualAR", "#CPE"];
                    //alert($("#" + Combo).val());
                    if ($("#" + Combo).val() != "AR") {
                        $(Comboelemt[0]).show();
                        $(Comboelemt[1]).hide();
                        $(Comboelemt[2]).attr("readonly", false);
                    } else {
                        $(Comboelemt[0]).hide();
                        $(Comboelemt[1]).show();
                        $(Comboelemt[2]).attr("readonly", true);
                    };
                    if (PRI == 1) {
                        $(Comboelemt[0] + "," + Comboelemt[2]).val("");
                        $('.selectpicker').selectpicker('title', '');
                    }
                };

                //Funcion de Provincia que actualiza los combobox de localidad
                function PROVINCIA(Combo) {

                    var ValP = $("#" + Combo).val();
                    //alert(Combo + " " + ValP);
                    var ComboLocalidad = (Combo == "ComboProvinciaR") ? "#ComboLocalidadR" : "#ComboLocalidadE";
                    $(ComboLocalidad).empty();
                    //llamo al JsonResult '/Postulante/EnCascada' y le envio la provincia seleccionada
                    $.getJSON('/Postulante/DropEnCascadaDomicilio', {
                        Provincia: ValP,
                    },
                        function (data) {
                            //agrego al dropboxlist la etiqueta option con cada localidad que le corresponde a la provincia seleccionada
                            $.each(data, function () {
                                $(ComboLocalidad).append('<option value=' +
                                    this.Value + '>' + this.Text + '</option>');
                            });
                            //para actualizar el combobox
                            $(ComboLocalidad).selectpicker('refresh');
                        });
                };

                //se actualiaz el codigo postal deacuerdo a la localidad seleccionada
                function LOCALIDAD(Combo) {
                    var ComboCP = (Combo == "ComboLocalidadR") ? "#CPR" : "#CPE";
                    //llamo al JsonResult '/Postulante/EnCascada' y le envio la localidad seleccionada
                    var valCP = $("#"+comboid).val();
                    $.getJSON('/Postulante/DropEnCascadaDomicilio', {
                        Localidad: valCP,
                    },
                        function (data) {
                            //agrego al dropboxlist la etiqueta option con cada localidad que le corresponde a la provincia seleccionada
                            $(ComboCP).val(data.Text);
                        });
                    ////para actualizar el combobox
                };
            });

            //Si lallamada POST tuvo exito
            function Exito(response, status, xhr) {
                alert("success: " + response.success + " " + response.msg);
            };

            //Si lallamada POST tuvo error
            function Falla(response) {
                alert("Error occured.");
            };

        </script>*@

}
